* emacsbridge

Emacsbridge is a tool to bridge some activities between the Emacs and Android world. It expects an Emacs daemon running and listening to TCP, typically in [[https://termux.com/][Termux]]. On Android side a foreground service is running to receive messages from Emacs.

Actions from Android side are sent as Lisp to be evaluated in Emacs through the Emacs daemon. Actions from Emacs are sent as JSON over HTTP.

Join the [[https://t.me/joinchat/LKbFBxtp5cY6wj8xdNse4w][emacsbridge Telegram group]] to discuss emacsbridge, or read the [[https://aardsoft.github.io/emacsbridge/html/][on-device]] or [[https://aardsoft.github.io/emacsbridge/doxygen/html/][Doxygen]] documentation.

** Getting started

On Android access to Emacs' server socket is not available due to Androids security policies. Therefore Emacs needs to be configured to [[https://www.gnu.org/software/emacs/manual/html_node/emacs/TCP-Emacs-server.html][use the TCP server]]. Host and port should be manually set - the host to avoid having the server listening on anything but localhost, the port as it needs to be configured in the Android application.

Setting =server-auth-key= prevents the key from changing every emacs restart, but tends to cause interesting problems. A better approach is to use the dynamic key generation, and call =emacsbridge-push-auth-key= on every start, making sure the call succeeds (i.e., Android application is running).

#+BEGIN_SRC Emacs-lisp
(setq server-use-tcp 1
      server-host "127.0.0.1"
      server-port 60325)
#+END_SRC

Once Emacs is started with the TCP server the connection to the Android application needs to be set up. The easiest way for this is opening eww in Emacs, navigating to http://localhost:1616/ and evaluating the three lisp snippets there:

#+CAPTION: Setup page in eww
#+ATTR_HTML: :style max-width:100%
[[./doc/setup_page.png]]

Doing so will first set the current server key in the Android application:

#+CAPTION: Confirmation of server key change
#+ATTR_HTML: :style max-width:100%
[[./doc/setup_auth_key.png]]

Then have the Android application test the connectivity, which sets =emacsbridge-auth-token= as custom variable (i.e, persistent), and marks the Android application as fully configured, which causes the RPC interfaces to required the auth token for reconfiguration. Pay attention to the status code and messages:

#+CAPTION: Successful initialisation
#+ATTR_HTML: :style max-width:100%
[[./doc/setup_OK_status.png]]

With that part of the setup completed a test notification can be triggered:

#+CAPTION: Test notification
#+ATTR_HTML: :style max-width:100%
[[./doc/setup_notification.png]]

To work correctly the Android application needs to run a foreground service. The UI can be closed at any time without impacting operation. The notification about the background service does nothing useful, and can be ignored by long-pressing on it.

When developing on the PC the socket connection can be used. Running the =pc-init.sh= script sets sane values (assuming an Emacs with a server is running locally). It can be downloaded from the integrated web server, adjusting address and port as needed:

#+BEGIN_SRC bash
curl -l localhost:1616/scripts/pc-init.sh|bash
#+END_SRC

** Additional configuration

To interface with the RPC interface loading the =emacsbridge-rpc= library is recommended. It also is available [[http://localhost:1616/emacsbridge-rpc.el][through the embedded web server.]]

For notifications =emacsbridge-rpc.el= provides a backend to [[https://github.com/jwiegley/alert][alert.el]] ([[http://localhost:1616/lisp/alert-emacsbridge.el][local server]]). To use it as default backend configure =alert-default-style=, through customisation or directly:

#+BEGIN_SRC Emacs-lisp
(require 'alert-emacsbridge)
(setq alert-default-style 'emacsbridge)
#+END_SRC

With this configured the following should trigger a notification on Android side:

#+BEGIN_SRC Emacs-lisp
(alert "Test")
#+END_SRC

#+CAPTION: Test notification from scratch
#+ATTR_HTML: :style max-width:100%
[[./doc/test_from_scratch.png]]

Other applications capable of using alert.el can make use of it. This shows a [[https://github.com/zevlg/telega.el][telega]] query notification:

#+CAPTION: Notification from telega
#+ATTR_HTML: :style max-width:100%
[[./doc/telega_notification.png]]
